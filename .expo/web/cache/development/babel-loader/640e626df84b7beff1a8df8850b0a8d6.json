{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport { styles } from \"../../Style\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var Network = function Network() {\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      users = _React$useState2[0],\n      setUsers = _React$useState2[1];\n\n  React.useEffect(function () {\n    (function _callee() {\n      var uid, jwt, request;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('uid'));\n\n            case 2:\n              uid = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('jwt'));\n\n            case 5:\n              jwt = _context.sent;\n              request = {\n                method: 'GET',\n                headers: {\n                  'uid': uid,\n                  'Cookie': \"access_token=\" + jwt\n                },\n                credentials: 'include'\n              };\n              fetch(\"http://localhost:5000/users\", request).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                return setUsers(data);\n              }).catch(function (err) {\n                return console.log(err);\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return _jsx(FlatList, {\n    data: users,\n    numColumns: 2,\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      return _jsx(User, {\n        item: item\n      });\n    }\n  });\n};\n\nvar User = function User(_ref2) {\n  var item = _ref2.item;\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      visible = _React$useState4[0],\n      setVisible = _React$useState4[1];\n\n  return _jsxs(View, {\n    style: {\n      flex: 1\n    },\n    children: [_jsx(TouchableHighlight, {\n      style: styles.card,\n      onPress: function onPress() {\n        return setVisible(!visible);\n      },\n      children: _jsx(View, {\n        children: _jsxs(Text, {\n          style: styles.pokemon,\n          children: [item.lastName, \" \", item.firstName]\n        })\n      })\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: visible,\n      onRequestClose: function onRequestClose() {\n        return Alert.alert('Modal has now been closed.');\n      },\n      children: _jsx(TouchableHighlight, {\n        style: {\n          backgroundColor: 'rgba(0, 0, 0, 0.6)',\n          flex: 1\n        },\n        activeOpacity: 1,\n        onPressOut: function onPressOut() {\n          return setVisible(!visible);\n        },\n        children: _jsx(View, {\n          style: styles.modal,\n          children: _jsxs(Text, {\n            children: [\"Voulez vous ajouter \", item.lastName, \" \", item.firstName]\n          })\n        })\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["/home/lenovo/workspace/socialNetwork/mobile/components/Views/Network.js"],"names":["React","styles","AsyncStorage","Network","useState","users","setUsers","useEffect","getItem","uid","jwt","request","method","headers","credentials","fetch","then","res","json","data","catch","err","console","log","item","index","User","visible","setVisible","flex","card","pokemon","lastName","firstName","Alert","alert","backgroundColor","modal"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { styles } from '../../Style'\nimport { FlatList, TouchableHighlight, Text, View, Modal, Alert, Button } from 'react-native'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\n\nexport const Network = () => {\n\n    const [users, setUsers] = React.useState([])\n\n    React.useEffect(() => {\n        (async () => {\n            const uid = await AsyncStorage.getItem('uid')\n            const jwt = await AsyncStorage.getItem('jwt')\n\n            const request = {\n                method: 'GET',\n                headers: {\n                    'uid': uid,\n                    'Cookie': `access_token=${jwt}`\n                },\n                credentials: 'include'\n            }\n\n            fetch(`http://localhost:5000/users`, request)\n                .then(res => res.json())\n                .then(data => setUsers(data))\n                .catch(err => console.log(err))\n        })()\n    }, [])\n\n    return (\n        <FlatList data={users} numColumns={2} keyExtractor={(item, index) => index}\n            renderItem={({ item, index }) => (\n                <User item={item} />\n            )}\n        />\n    )\n}\n\nconst User = ({ item }) => {\n\n    const [visible, setVisible] = React.useState(false)\n\n    return (\n        <View style={{ flex: 1 }}>\n            <TouchableHighlight style={styles.card} onPress={() => setVisible(!visible)}>\n                <View>\n                    <Text style={styles.pokemon}>{item.lastName} {item.firstName}</Text>\n                </View>\n            </TouchableHighlight>\n\n            <Modal animationType={\"slide\"} transparent={true} visible={visible} onRequestClose={() => Alert.alert('Modal has now been closed.')}>\n                <TouchableHighlight style={{ backgroundColor: 'rgba(0, 0, 0, 0.6)', flex: 1, }} activeOpacity={1} onPressOut={() => setVisible(!visible)}>\n                    <View style={styles.modal}>\n                        {/* VOIR LINKEDIN */}\n                        <Text>Voulez vous ajouter {item.lastName} {item.firstName}</Text>\n                    </View>\n                </TouchableHighlight>\n            </Modal>\n        </View>\n    )\n}"]},"metadata":{},"sourceType":"module"}